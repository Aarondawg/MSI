(*
Skills
======

The Skills file holds any routines that are used for multiple skills and that
don't fit into any other include file.

The source for Skills.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Core/Skills.simba>`_.

*)

(*
MSI_SetSkillLevels
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_SetSkillLevels();

Gets and sets each player's skill levels for each on if their scripts.  This
procedure is called before the progress report.

.. note::

  | Author: Coh3n
  | Last Updated: 15 May 2011 by Coh3n

Example:

.. code-block:: pascal

  MSI_SetSkillLevels();
*)
procedure MSI_SetSkillLevels();
var
  i, curLev: Integer;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_SetSkillLevels');

  case MSI_PointerCall(MSI_OnGetSkillLevels, []) of
    EXTRA_CONTINUE: ;
    EXTRA_EXIT: Exit;
  end;

  with MSI_Players[CurrentPlayer] do
    for i := 0 to High(Scripts) do
    begin
      {$IFDEF REFLECTION}
      if (not MSI_HookBroken[HOOK_LEVEL_SKILL]) then
        curLev := R_GetSkillLevel(MSI_Scripts[Scripts[i].Name].SkillName)
      else
        curLev := GetSkillLevel(MSI_Scripts[Scripts[i].Name].SkillName);
      {$ELSE}
      curLev := GetSkillLevel(MSI_Scripts[Scripts[i].Name].SkillName);
      {$ENDIF}

      // Only sets if the level has increased
      if (curLev <= ReportInfo.SkillLevels[i]) then
      begin
        MSI_Debug(Capitalize(MSI_Scripts[Scripts[i].Name].SkillName) + ' level hasn''t changed');
        Continue;
      end;

      // Set the ReportInfo attribute
      ReportInfo.SkillLevels[i] := curLev;

      with MSI_Scripts[Scripts[i].Name] do
        MSI_Debug(SkillName + ' Level: ' + IntToStr(ReportInfo.SkillLevels[i]));
    end;

  MSI_CloseHeader('MSI_SetSkillLevels: Finished');
end;

(*
MSI_BestTool
~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_BestTool: Integer;

Determines the best tool for the current player's current script.  This probably
will not be used for every skill or script.

.. note::

  | Author: Coh3n
  | Last Updated: 05 October 2010 by Coh3n

Example:

.. code-block:: pascal

  for i := MSI_BestTool downto MSI_WorstTool do
    Result := MSI_FindTool(i, TAB_INV, x, y);
*)
function MSI_BestTool: Integer;
begin
  if (not LoggedIn) then
    Exit;

  with MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name] do
  begin
    case (SkillConst) of
      SKILL_WOODCUTTING:
        case (MSI_Players[CurrentPlayer].ReportInfo.SkillLevels[CurrentScript]) of
          REQ_TOOL_DRAGON..REQ_MAX_LEVEL     : Result := HATCHET_DRAGON;
          REQ_TOOL_RUNE..REQ_TOOL_DRAGON     : Result := HATCHET_RUNE;
          REQ_TOOL_ADAMANT..REQ_TOOL_RUNE    : Result := HATCHET_ADAMANT;
          REQ_TOOL_MITHRIL..REQ_TOOL_ADAMANT : Result := HATCHET_MITHRIL;
          REQ_TOOL_STEEL..REQ_TOOL_MITHRIL   : Result := HATCHET_STEEL;

          else
            Result := HATCHET_IRON;
        end;

      SKILL_MINING:
        case (MSI_Players[CurrentPlayer].ReportInfo.SkillLevels[CurrentScript]) of
          REQ_TOOL_DRAGON..REQ_MAX_LEVEL     : Result := PICKAXE_DRAGON;
          REQ_TOOL_RUNE..REQ_TOOL_DRAGON     : Result := PICKAXE_RUNE;
          REQ_TOOL_ADAMANT..REQ_TOOL_RUNE    : Result := PICKAXE_ADAMANT;
          REQ_TOOL_MITHRIL..REQ_TOOL_ADAMANT : Result := PICKAXE_MITHRIL;
          REQ_TOOL_STEEL..REQ_TOOL_MITHRIL   : Result := PICKAXE_STEEL;

          else
            Result := PICKAXE_IRON;
        end;

      else
        MSI_SubDebug('MSI_BestTool: Invalid skill!');
    end;

    MSI_Debug('Best tool for ' + SkillName + ' is '+ MSI_Items[Result].Name);
  end;
end;

(*
MSI_WorstTool
~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_WorstTool: Integer;

Determines the worst tool for the current player's current script.
This probably will not be used for every skill or script.

.. note::

  | Author: Coh3n
  | Last Updated: 05 October 2010 by Coh3n

Example:

.. code-block:: pascal

  for i := MSI_BestTool downto MSI_WorstTool do
    Result := MSI_FindTool(i, TAB_INV, x, y);
*)
function MSI_WorstTool: Integer;
begin
  if (not LoggedIn) then
    Exit;

  with MSI_Scripts[MSI_Players[CurrentPlayer].Scripts[CurrentScript].Name] do
    case (SkillConst) of
      SKILL_WOODCUTTING:
        Result := HATCHET_BRONZE;

      SKILL_MINING:
        Result := PICKAXE_BRONZE;

      else
        MSI_SubDebug('MSI_WorstTool: Invalid skill!');
    end;
end;

(*
MSI_RandomizeArray
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_RandomizeArray(Objs: TIntegerArray): TIntegerArray;

Returns the array of integers, 'Objs', in a random order.  This is used so the
user can set MSI's Priority Autoing feature so it will look for one object
(i.e. look for one tree) over another.

.. note::

  | Author: NCDS
  | Last Updated: 20 September 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_FindObjects(MSI_RandomizeArray([TREE_NORMAL, TREE_OAK, TREE_WILLOW]), i, ClickLeft);
*)
function MSI_RandomizeArray(Objs: TIntegerArray): TIntegerArray;
var
  i, o: Integer;
begin
  SetLength(Result, Length(Objs));

  while (Length(Objs) <> 0) do
    for i := 0 to High(Result) do
    begin
      o := Random(Length(Objs));
      //Writeln(IntToStr(Objs[o]));
      Result[i] := Objs[o];
      DeleteValueInIntArray(Objs, o);
    end;
end;

(*
MSI_ChooseObject
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_ChooseObject(Priorities: TIntegerArray): Integer;

Chooses an index from 'Priorities' based on the index's value.  The higher the
index value, the higher chance it has of being chosen.

.. note::

  | Author: Sir R. Magician
  | Last Updated: 20 September 2010 by NCDS

Example:

.. code-block:: pascal

  objs := [TREE_NORMAL, TREE_OAK, TREE_WILLOW];
  obj := MSI_ChooseObject([10, 30, 60]);
  MSI_FindObject(objs[obj], ClickLeft);
*)
function MSI_ChooseObject(Priorities: TIntegerArray): Integer;
var
  TIA: TIntegerArray;
  i , Sum, CurrSum: Integer;
begin
  SetLength(TIA, Length(Priorities));
  Sum := MSI_SumTIA(Priorities);

  for i := 0 to High(Priorities) do
  begin
    CurrSum := CurrSum + Priorities[i];
    TIA[i] := CurrSum;
  end;

  Sum := Random(Sum) + 1;

  for Result := 0 to High(TIA) do
    if Sum <= TIA[Result] then
      break;
end;

(*
MSI_RearrangeArray
~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_RearrangeArray(Objs, Priorities: TIntegerArray): TIntegerArray;

Returns the array 'Objs' in a rearranged order based on 'Priorities'.  Uses a
combination of MSI_RandomizeArray and MSI_ChooseObject.

.. note::

  | Author: NCDS
  | Last Updated: 20 September 2010 by Coh3n

Example:

.. code-block:: pascal

  objs := MSI_RearrangeArray([TREE_NORMAL, TREE_OAK], [30, 70]);
*)
function MSI_RearrangeArray(Objs, Priorities: TIntegerArray): TIntegerArray;
var
  i, o: Integer;
begin
  SetLength(Result, Length(Objs));

  if (Length(Objs) <> Length(Priorities)) or (Length(Priorities) = 0) then
  begin
    Result := MSI_RandomizeArray(Objs);
    Exit;
  end;

  while (Length(Objs) > 0) do
    for i := 0 to High(Result) do
    begin
      o := MSI_ChooseObject(Priorities);
      Result[i] := Objs[o];
      DeleteValueInIntArray(Objs, o);
      DeleteValueInIntArray(Priorities, o);
    end;
end;

(*
MSI_CB_DoAllScreen
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_CB_DoAllScreen: Boolean;

Detects if the chat box option menu is open.

.. note::

  | Author: NCDS
  | Last Updated: 22 March 2011 by NCDS

Example:

.. code-block:: pascal

  Result := MSI_CB_DoAllScreen;
*)
function MSI_CB_DoAllScreen: Boolean;
begin
  Result := (GetColor(497, 367) = 5025494);
end;

(*
MSI_AutoInvFull
~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_AutoInvFull(Func: function(a: TIntegerArray; var b: Boolean): Boolean): Boolean;

Repeats the function 'Func' until the inventory is full.

.. note::

  | Author: Coh3n
  | Last Updated: 22 June 2011 by Coh3n

Example:

.. code-block:: pascal

  Result := MSI_AutoInvFull(@MSI_ChopTree);
*)
function MSI_AutoInvFull(Func: function(a: TIntegerArray; var b: Boolean): Boolean): Boolean;
var
  t, waitTime, tTime, maxTime: Integer;
  tObjects, newObjects: TIntegerArray;
  forceFail: Boolean;
begin
  if (not LoggedIn) then
    Exit;

  maxTime := (getSystemTime + (45 * 60000)) // 45 minutes
  t := maxTime;

  repeat
    while (not InvFull) and (LoggedIn) do
      with MSI_Players[CurrentPlayer] do
      begin
        RunEnergy(20);
        GameTab(TAB_INV);

        with MSI_Players[CurrentPlayer].Scripts[CurrentScript] do
          case (MSI_Scripts[Name].SkillConst) of
            SKILL_WOODCUTTING: tObjects := Trees;
            SKILL_MINING: tObjects := Rocks;
            SKILL_FISHING: tObjects := FishSpots;
          end;

        if (not MSI_Scripts[Scripts[CurrentScript].Name].ClickClosest) then
          newObjects := MSI_RearrangeArray(tObjects, Scripts[CurrentScript].Priority)
        else
          newObjects := tObjects;

        if (TimeFromMark(waitTime) >= tTime) then
          waitTime := 0;

        if (Func(newObjects, forceFail)) then
        begin
          t := maxTime;
          waitTime := 0;
          MSI_NotBoxes := [];
        end else begin
          if (MSI_FindRandoms(False)) then
          begin
            t := maxTime;
            continue;
          end;

          MSI_Antiban(randomRange(1000, 4000), 50);
          wait(randomRange(250, 500));

          if (forceFail) then
            Exit;

          if (waitTime > 0) then
            Continue;

          // Adjust camera angle to make some objects visible
          if (random(2) < 1) then
            makeCompass(randomRange(35, 55))
          else
            makeCompass(randomRange(195, 215));

          if (MSI_Relocate(MSI_Players[CurrentPlayer].Location)) then
          begin
            tTime := RandomRange(60000, 120000); // Random 1-2 minutes
            MSI_SubDebug('Waiting ' + IntToStr(tTime) + ' ms before relocating again');
            MarkTime(waitTime);
            MSI_NotBoxes := [];
            Break;
          end else
            Exit;

          if (GetSystemTime > (t div 5)) then
            MSI_NotBoxes := [];
        end;

        Wait(RandomRange(300, 800));
      end;

    Result := (InvFull) or (Pos('enough inventor', GetBlackChatMessage) <> 0);
  until(Result or (GetSystemTime > t) or (not LoggedIn));
end;


