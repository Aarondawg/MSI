(*
Fishing
=======

The Fishing file stores any functions or procedures that are specific to the
fishing skill.

The source for Fishing.simba can be found
`here <https://github.com/SRL/MSI/raw/master/MSI/Skills/Fishing.simba>`_.

*)

(*
MSI_FishingTools
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_FishingTools(Obj: Integer): TIntegerArray;

Returns all the required fishing tools to fish at the fishing spot 'Obj'.

.. note::

  | Author: 3Garrett3
  | Last Updated: 07 October 2010 by Coh3n

Example:

.. code-block:: pascal

  // This will return the constant values for a fly fishing tod and feathers
  tools := MSI_FishingTools(FISHSPOT_LURE);
*)
function MSI_FishingTools(Obj: Integer): TIntegerArray;
begin
  case (Obj) of
    FISHSPOT_NET:
      Result := [FISH_SMALLNET];

    FISHSPOT_BAIT:
      Result := [FISH_ROD_BAIT, FISH_BAIT];

    FISHSPOT_LURE:
      Result := [FISH_ROD_FLY, MISC_FEATHER];

    FISHSPOT_CAGE:
      Result := [FISH_POT_LOBSTER];

    FISHSPOT_HARPOON:
      Result := [FISH_HARPOON];

    else
      MSI_Debug('Invalid Fishing Spot Argument');
  end;

  MSI_SubDebug('Tools: ' + ToStr(Result));
end;

(*
MSI_SetupFishing
~~~~~~~~~~~~~~~~

.. code-block:: pascal

  function MSI_SetupFishing(): Boolean;

Sets the player up for fishing.  Will look for all the required tools for each
of the players fishing spots.  If a tool(s) isn't found, will attempt to
withdraw from the bank.  If the tool can't be withdrawn, the fishing spot is
removed from the player's fishing spots.  This is the procedure that is
pointed to a fishing script's 'PlayerSetup' attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 06 October 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_DB_FISHER].PlayerSetup := @MSI_SetupFishing;
*)
function MSI_SetupFishing(): Boolean;
var
  i, j, t, x, y: Integer;
  tools, intObjs, newObjs: TIntegerArray;
  toWithdraw: array of TIntegerArray;
  objReady: TBooleanArray;
  curScript: TScript;
  fishSpot: TMSObject;
  b: Boolean;
begin
  if (not LoggedIn) then
    Exit;

  MSI_AddHeader('MSI_SetupFishing');

  with MSI_Players[CurrentPlayer] do
  begin
    SetLength(objReady, Length(Scripts[CurrentScript].FishSpots));
    SetLength(toWithdraw, Length(Scripts[CurrentScript].FishSpots));
    curScript := MSI_Scripts[Scripts[CurrentScript].Name];
    intObjs := Scripts[CurrentScript].FishSpots;

    MSI_Debug('FishSpots: ' + ToStr(Scripts[CurrentScript].FishSpots));

    // Loops through the player objects checking for the required tools for each
    for i := 0 to High(intObjs) do
    begin
      tools := MSI_FishingTools(intObjs[i]); // Gets the required fishing tools for the fishing spot
      SetLength(toWithdraw[i], length(tools));
      t := 0;

      for j := 0 to High(tools) do
        if (not MSI_FindTool(tools[j], TAB_INV, x, y)) then
        begin
          toWithdraw[i][t] := tools[j]; // Adds to the array if the tool isn't found
          inc(t);
        end;

      setLength(toWithdraw[i], t);
    end;

    // In a separate loop so it only opens the bank once
    for i := 0 to High(intObjs) do
      if (Length(toWithdraw[i]) <= 0) then // If all tools are found
        objReady[i] := True
      else // If 1+ tools aren't found
        if (MSI_Locations[Location].AtBank) then
          if (MSI_OpenBank(curScript.WhichBank, Pin)) then
            if (MSI_Withdraw(toWithdraw[i], [])) then
              for j := 0 to High(toWithdraw[i]) do
              begin
                t := GetSystemTime + 2000;
                while (GetSystemTime < t) do
                begin
                  Wait(300 + Random(200));
                  if (MSI_FindTool(toWithdraw[i][j], TAB_INV, x, y)) then
                    Break;
                end;

                if (j = High(toWithdraw[i])) then
                  objReady[i] := True;
              end;

    setLength(newObjs, length(objReady));
    t := 0;

    for i := 0 to High(objReady) do
      if (objReady[i]) then
      begin
        newObjs[t] := intObjs[i];
        inc(t);
      end else begin
        fishSpot := MSI_GetObject(intObjs[i]);
        MSI_Debug(fishSpot.name + ': Required tools not found');
        MSI_Deposit(MSI_FishingTools(intObjs[i]), [], b);
      end;

    setLength(objReady, t);

    // Resets the objects so if the tools aren't found it will still fish in the spots for which the tools were found
    Scripts[CurrentScript].FishSpots := newObjs;
    Result := (Length(Scripts[CurrentScript].FishSpots) > 0);

    for i := 0 to High(Scripts[CurrentScript].FishSpots) do
    begin
      t := Scripts[CurrentScript].FishSpots[i];
      fishSpot := MSI_GetObject(intObjs[i]);
      MSI_Debug('Fishing spot ' + IntToStr(i) + ': ' + fishSpot.name);
    end;

    if (MSI_Locations[Location].AtBank) or
       (MSI_Scripts[Scripts[CurrentScript].Name].BankType = NPC) then
      if (InvFull) then
        MSI_Scripts[Scripts[CurrentScript].Name].BankObjects();
  end;

  MSI_CloseHeader('MSI_SetupFishing: ' + BoolToStr(Result));
end;

(*
MSI_WaitWhileFishing
~~~~~~~~~~~~~~~~~~~~

.. code-block:: pascal

  procedure MSI_WaitWhileFishing(fishSpot: TMSObject; var failed: boolean);

Waits while the player is fishing.  Uses a combination of inventory checks,
timers, animations and object finding to detemerine whether or not the player
is still fishing.

.. note::

  | Author: 3Garrett3
  | Last Updated: 14 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_FindObject(fishSpot, ClickLeft)) then
    Result := MSI_WaitWhileFishing(fishSpot, failed);
*)
procedure MSI_WaitWhileFishing(fishSpot: TMSObject; var failed: boolean);
var
  i, h, x, y, CTS, animTries, colorTries, oldInvCount, waitTime, invTimer: integer;
  idle: TAnimation;
  arr: TPointArray;
  ATPA: T2DPointArray;
begin
  if ((not loggedIn) or (invFull)) then
    exit;

  MSI_AddHeader('MSI_WaitWhileFishing');
  fishSpot.searchArea := MSI_MakeBox(point(fishSpot.x, fishSpot.y),
                                     round(fishSpot.w / 1.75),
                                     round(fishSpot.h / 1.75));

  {$IFDEF SMART}
    if (MSI_Settings[SETUP_DEBUG_SMART]) then
      SMART_DrawBoxEx(true, fishSpot.searchArea, clBlue);
  {$ENDIF}

  idle := MSI_GetAnimation(ANIM_IDLE);
  waitTime := (getSystemTime + (60000 * 3));
  oldInvCount := invCount;
  markTime(invTimer);
  flag;

  CTS := getToleranceSpeed();
  MSI_Debug('Current CTS: ' + intToStr(CTS));

  setColorToleranceSpeed(2);
  setToleranceSpeed2Modifiers(fishSpot.hue, fishSpot.sat);

  setLength(ATPA, length(fishSpot.colors));
  h := high(ATPA);

  for i := 0 to h do
    findColorsTolerance(ATPA[i], fishSpot.colors[i],
                        fishSpot.searchArea.x1, fishSpot.searchArea.y1,
                        fishSpot.searchArea.x2, fishSpot.searchArea.y2,
                        fishSpot.tol);

  arr := mergeATPA(ATPA);

  repeat
    MSI_FindRandoms(false);

    // check for the "you're out of bait" text in the chat box
    if (findText(x, y, 'left', NPCChars, MCX1, MCY1, MCX2, MCY2)) then
    begin
      MSI_Debug('We have run out of fishing bait!');
      failed := true;
      break;
    end;

    // check for the "you need tool to fish" message
    if (findText(x, y, 'need', NPCChars, MCX1, MCY1, MCX2, MCY2)) then
    begin
      MSI_Debug('Accidentially clicked wrong fishing spot');
      break;
    end;

    // looking for fishing spot
    for i := 0 to h do
      findColorsTolerance(ATPA[i], fishSpot.colors[i],
                          fishSpot.searchArea.x1, fishSpot.searchArea.y1,
                          fishSpot.searchArea.x2, fishSpot.searchArea.y2,
                          fishSpot.tol);

    arr := mergeATPA(ATPA);

    if (length(arr) < fishSpot.accuracy) then
    begin
      MSI_Debug('Colours found < Accuracy');
      inc(colorTries);
    end else begin
      MSI_Debug('Fishing spot found');
      colorTries := 0;
    end;

    MSI_AntiBan(randomRange(0, 3000), ANTI_BAN_CHANCE);

    if (invFull) then
    begin
      MSI_Debug('Inventory is full');
      break;
    end;

    MSI_Debug('Checking inventory count');
    if (timeFromMark(invTimer) > 45000) then // if no new fish in inv after 30 seconds, spot probably moved
      if (oldInvCount = invCount) then
      begin
        MSI_SubDebug('Nothing caught for more than 45 seconds');
        break;
      end else begin
        MSI_SubDebug('Got more fish, setting new inventory count');
        oldInvCount := invCount;
        markTime(invTimer);
      end;

    MSI_Debug('Checking player''s pixel shifting');
    if (MSI_IsAnimating(idle)) then // check to see if the player is still animating
    begin
      MSI_SubDebug('Player isn''t animating');
      inc(animTries);
    end else begin
      MSI_SubDebug('Player is animating');
      animTries := 0;
    end;

    // breaks out after 3 minutes (assumes the player isn't fishing)
    if (waitTime < getSystemTime) then
    begin
      MSI_Debug('Been fishing for 3 minutes straight, breaking as failsafe');
      break;
    end;

    wait(randomRange(300, 700));
  until((not loggedIn) or (animTries >= 10) or (colorTries > 5));

  MSI_CloseHeader('MSI_WaitWhileFishing: Finished');

  setColorToleranceSpeed(CTS);
  setToleranceSpeed2Modifiers(0.2, 0.2);
end;

(*
MSI_Fish
~~~~~~~~

.. code-block:: pascal

  function MSI_Fish(which: TIntegerArray; var forceFail: boolean): boolean;

Fishes at the first fishing spot it finds from the array 'which'.  Will return
false if the player runs out of bait or loses a required tool.  If such a thing
happens, that fishing spot is removed from the player's fishing spots array.

.. note::

  | Author: 3Garrett3
  | Last Updated: 10 June 2011 by Coh3n

Example:

.. code-block:: pascal

  if (MSI_Fish([FISHSPOT_NET], fail)) then
    if (not fail) then
      MSI_Debug('Fished');
*)
function MSI_Fish(which: TIntegerArray; var forceFail: boolean): boolean;
var
  t, i: integer;
  failed: boolean;
  tools: TIntegerArray;
  objs: TMSObjectArray;
  obj: TMSObject;
begin
  if (not loggedIn) then
    exit;

  objs := MSI_GetObjects(which);
  if (MSI_FindObjects(objs, moLeft, obj)) then
  begin
    result := true;
    MSI_WaitWhileFishing(obj, failed);

    if (failed) then
      with MSI_Players[currentPlayer].scripts[currentScript] do
        if (Length(fishSpots) > 1) then
          if (inIntArrayEx(fishSpots, t, obj.constant)) then
          begin
            MSI_SubDebug('Removing '+obj.name+' from FishSpot array');
            deleteValueInIntArray(fishSpots, t);
            deleteValueInIntArray(priority, t);

            // Remove tools from exceptions array
            tools := MSI_FishingTools(obj.constant);
            for i := 0 to High(tools) do
              if (inIntArrayEx(exceptions, t, MSI_Items[tools[i]].invSlot)) then
              begin
                deleteValueInIntArray(exceptions, t);
                MSI_Items[tools[i]].invSlot := 0;
              end;
          end
        else begin
          MSI_Players[currentPlayer].reportInfo.falseReason := 'Ran out of fishing bait';
          result := false;
          forceFail := true;
          exit;
        end;
  end else
    MSI_FindRandoms(false);
end;

(*
MSI_Fish
~~~~~~~~

.. code-block:: pascal

  function MSI_Fish(Which: TIntegerArray; var ForceFail: Boolean): Boolean;

Calls MSI_AutoInvFull (
`Skills.simba <https://github.com/SRL/MSI/raw/master/MSI/Skills/Skills.simba>`_)
and is pointed to a fishing script's 'AutoObjects' attribute.

.. note::

  | Author: Coh3n
  | Last Updated: 20 September 2010 by Coh3n

Example:

.. code-block:: pascal

  MSI_Scripts[SCRIPT_DB_FISHER].AutoObjects := @MSI_FishInvFull;
*)
function MSI_FishInvFull: Boolean;
begin
  Result := MSI_AutoInvFull(@MSI_Fish); // MSI_AutoInvFull in Skills.simba
end;



