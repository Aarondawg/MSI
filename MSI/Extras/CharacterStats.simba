//{$DEFINE EXTRA_CHARACTER_STATS}
{$IFDEF EXTRA_CHARACTER_STATS}

var
  CharacterStats_Accounts: Integer;
  CharacterStats_NewInfo: String;
  CharacterStats_Skills: TStringArray;
  CharacterStats_Skills2: TStringArray;

const
  CharacterStats_Path = IncludePath + 'MSI\MSI\Extras\Accounts\';

{******************************************************************************}
{ procedure CheckFile;                                                         }
{ By: Bobzilla69                                                               }
{ Date: 13 January 2011                                                        }
{ Description: Check if File exists if it doent creates file.                  }
{              Also handles if file will be added to or rewritten              }
{******************************************************************************}
Procedure Bobzilla_CheckFile;
begin
  try
    if FileExists(CharacterStats_Path + 'Characters.xml') then
    begin
      //Writeln('File all ready created');
      CharacterStats_Accounts:= OpenFile(CharacterStats_Path + 'Characters.xml' , False);
      CloseFile(CharacterStats_Accounts);
    end else
    begin
      //WriteLn('File not Found, Creating new file')
      CharacterStats_Accounts := CreateFile(CharacterStats_Path + 'Characters.xml');
      CloseFile(CharacterStats_Accounts);
    end;
  except
    MSI_SubDebug('Bobzilla_CheckFile: ' + ExceptionToString(ExceptionType, ExceptionParam));
  end;
end;

{******************************************************************************}
{ procedure WriteFile(New, Old:string);                                        }
{ By: Bobzilla69                                                               }
{ Date: 13 January 2011                                                        }
{ Description: Writes Character data to the file.                              }
{ New is new data to be added to file.                                         }
{ Old is data that was in file to be re writen                                 }
{******************************************************************************}
Procedure Bobzilla_WriteFile(New:String);
begin
  try
    CharacterStats_Accounts := RewriteFile(CharacterStats_Path + 'Characters.xml', False);
    WriteFileString(CharacterStats_Accounts, New);
    CloseFile(CharacterStats_Accounts);
  except
    MSI_SubDebug('Bobzilla_WriteFile: ' + ExceptionToString(ExceptionType, ExceptionParam));
  end;
end;

{******************************************************************************}
{ procedure GetData;                                                           }
{ By: Bobzilla69                                                               }
{ Date: 13 January 2011                                                        }
{ Description: Using reflection gets all character skill levels                }
{              and stores it to a Array for that character                     }
{******************************************************************************}
Procedure Bobzilla_GetData;
var
  I : Integer;
begin
  MSI_SubDebug('Bobzilla_GetData: Getting skill levels');
  SetLength(Players[CurrentPlayer].Arrays[1], 25);
  {$IFDEF REFLECTION}
  if (not MSI_HookBroken[HOOK_LEVEL_SKILL]) then
  begin
    for I := SKILL_ATTACK to SKILL_DUNGEONEERING do
      Players[CurrentPlayer].Arrays[1][I] := R_GetSkillLevel(I);
  end else
    for I := SKILL_ATTACK to SKILL_DUNGEONEERING do
      Players[CurrentPlayer].Arrays[1][I] := GetSkillLevel(I);
  {$ELSE}
  for I := SKILL_ATTACK to SKILL_DUNGEONEERING do
    Players[CurrentPlayer].Arrays[1][I] := GetSkillLevel(I);
  {$ENDIF}
end;

{******************************************************************************}
{ procedure WriteData;                                                         }
{ By: Bobzilla69                                                               }
{ Date: 13 January 2011                                                        }
{ Description: Handles extracting data from array and sending to WriteFile;    }
{******************************************************************************}
Procedure Bobzilla_WriteData;
var
  B, I:integer;
begin
  Bobzilla_CheckFile;
  CharacterStats_NewInfo:= '<Characters>'+#13;  //start of xml file
  for I:=0 to HowManyPlayers - 1 do
  begin
    CharacterStats_NewInfo := CharacterStats_NewInfo + '<Character>' + #13; //start for a palyer
    CharacterStats_NewInfo := CharacterStats_NewInfo + '<Name>'+Players[I].Name+'</Name>'+#13;
    CharacterStats_Skills := ['<Attack>','<Defence>','<Strength>','<Hitpoints>','<Range>','<Prayer>','<Magic>','<Cooking>','<Woodcutting>','<Fletching>','<Fishing>','<Firemaking>','<Crafting>','<Smithing>','<Mining>','<Herblore>','<Agility>','<Thieving>','<Slayer>','<Farming>','<Runecrafting>','<Hunter>','<Construction>','<Summoning>','<Dungeoneering>'];
    CharacterStats_Skills2 := ['</Attack>','</Defence>','</Strength>','</Hitpoints>','</Range>','</Prayer>','</Magic>','</Cooking>','</Woodcutting>','</Fletching>','</Fishing>','</Firemaking>','</Crafting>','</Smithing>','</Mining>','</Herblore>','</Agility>','</Thieving>','</Slayer>','</Farming>','</Runecrafting>','</Hunter>','</Construction>','</Summoning>','</Dungeoneering>'];
    for B := 0 to high(Players[I].Arrays[1]) do
    begin
      CharacterStats_NewInfo := CharacterStats_NewInfo + CharacterStats_Skills[B] + IntToStr(Players[I].Arrays[1][B]) + CharacterStats_Skills2[B] + #13;
    end;                  //IntToStr(Players[CurrentPlayer].Arrays[1][B]
    CharacterStats_NewInfo:= CharacterStats_NewInfo + '</Character>' + #13; //end of character
  end;
  CharacterStats_NewInfo:= CharacterStats_NewInfo + '</Characters>'
  Bobzilla_WriteFile(CharacterStats_NewInfo);
end;

procedure Bobzilla_UpdatePlayer;
var
  Text, After:String;
  SplitText, CharacterStats_Skills, CharacterStats_Skills2: TStringArray;
  Updated:Boolean;
  I, S, CharacterStats_Accounts:integer;
begin
  Updated:= False;   //used for checkign if updating or adding

  Bobzilla_CheckFile;   //checks file is created if nto makes file

  Bobzilla_GetData;  //uses reflection to get players skill levels

  try
    CharacterStats_Accounts:= OpenFile(CharacterStats_Path + 'Characters.xml' , False);   //opens file to get data inside it
    ReadFileString(CharacterStats_Accounts, Text, FileSize(CharacterStats_Accounts));
    CloseFile(CharacterStats_Accounts);
  except
    MSI_SubDebug('Bobzilla_UpdatePlayer: ' + ExceptionToString(ExceptionType, ExceptionParam));
  end;

  SplitText:= srl_Explode(Text, '</Character>');  //splits characters into sections

  for I:=0 to high(Splittext) -1 do    //0 = start <characters> <character>, last number = </characters>
  begin
    if PosEx(Players[CurrentPlayer].Name ,SplitText[I], 1) > 0 then  //checks for player name in sections
    begin
      MSI_SubDebug('Player Found in XML, Updating');
      if I = 0 then  //because of the way they are split the first split needs to readd all this info
      begin
        After:= '<Characters>' + #13;
        After:= After + '<Character>' + #13;
        After := After + '<Name>' + Players[CurrentPlayer].Name + '</Name>' + #13;
        CharacterStats_Skills:= ['<Attack>','<Defence>','<Strength>','<Hitpoints>','<Range>','<Prayer>','<Magic>','<Cooking>','<Woodcutting>','<Fletching>','<Fishing>','<Firemaking>','<Crafting>','<Smithing>','<Mining>','<Herblore>','<Agility>','<Thieving>','<Slayer>','<Farming>','<Runecrafting>','<Hunter>','<Construction>','<Summoning>','<Dungeoneering>'];
        CharacterStats_Skills2:= ['</Attack>','</Defence>','</Strength>','</Hitpoints>','</Range>','</Prayer>','</Magic>','</Cooking>','</Woodcutting>','</Fletching>','</Fishing>','</Firemaking>','</Crafting>','</Smithing>','</Mining>','</Herblore>','</Agility>','</Thieving>','</Slayer>','</Farming>','</Runecrafting>','</Hunter>','</Construction>','</Summoning>','</Dungeoneering>'];
        for S:=0 to high(CharacterStats_Skills) do
        begin
          After := After + CharacterStats_Skills[S] + IntToStr(Players[CurrentPlayer].Arrays[1][S]) + CharacterStats_Skills2[S] + #13;
        end;                  //IntToStr(Players[CurrentPlayer].Arrays[1][B]
        After:= After + '</Character>'+#13;
      end else
      begin
        After:= After + '<Character>'+#13;
        After := After + '<Name>'+Players[CurrentPlayer].Name+'</Name>'+#13;
        CharacterStats_Skills:= ['<Attack>','<Defence>','<Strength>','<Hitpoints>','<Range>','<Prayer>','<Magic>','<Cooking>','<Woodcutting>','<Fletching>','<Fishing>','<Firemaking>','<Crafting>','<Smithing>','<Mining>','<Herblore>','<Agility>','<Thieving>','<Slayer>','<Farming>','<Runecrafting>','<Hunter>','<Construction>','<Summoning>','<Dungeoneering>'];
        CharacterStats_Skills2:= ['</Attack>','</Defence>','</Strength>','</Hitpoints>','</Range>','</Prayer>','</Magic>','</Cooking>','</Woodcutting>','</Fletching>','</Fishing>','</Firemaking>','</Crafting>','</Smithing>','</Mining>','</Herblore>','</Agility>','</Thieving>','</Slayer>','</Farming>','</Runecrafting>','</Hunter>','</Construction>','</Summoning>','</Dungeoneering>'];
        for S:=0 to high(CharacterStats_Skills) do
        begin
          After := After + CharacterStats_Skills[S] + IntToStr(Players[CurrentPlayer].Arrays[1][S]) + CharacterStats_Skills2[S] + #13;
        end;
        After:= After + '</Character>' + #13;
      end;
      Updated:= True;  //we updated plaer so no need to add one
    end else
    begin   //if player is not in split section simply store data that is in it
      After:= After + SplitText[I];
      After:= After + '</Character>' + #13;
    end;
  end;
  if (not Updated) then   //no player in section so we add onto end of file
  begin
    MSI_SubDebug('CharacterStatsV2: Player not found, Adding Player');
    if I = 0 then   //same as previouse if its a new file we need to write starting info
    begin
      After:= '<Characters>' + #13;
      After:= After + '<Character>' + #13;
      After := After + '<Name>' + Players[CurrentPlayer].Name + '</Name>' + #13;
      CharacterStats_Skills:= ['<Attack>','<Defence>','<Strength>','<Hitpoints>','<Range>','<Prayer>','<Magic>','<Cooking>','<Woodcutting>','<Fletching>','<Fishing>','<Firemaking>','<Crafting>','<Smithing>','<Mining>','<Herblore>','<Agility>','<Thieving>','<Slayer>','<Farming>','<Runecrafting>','<Hunter>','<Construction>','<Summoning>','<Dungeoneering>'];
      CharacterStats_Skills2:= ['</Attack>','</Defence>','</Strength>','</Hitpoints>','</Range>','</Prayer>','</Magic>','</Cooking>','</Woodcutting>','</Fletching>','</Fishing>','</Firemaking>','</Crafting>','</Smithing>','</Mining>','</Herblore>','</Agility>','</Thieving>','</Slayer>','</Farming>','</Runecrafting>','</Hunter>','</Construction>','</Summoning>','</Dungeoneering>'];
      for S:=0 to high(CharacterStats_Skills) do
      begin
        After := After + CharacterStats_Skills[S] + IntToStr(Players[CurrentPlayer].Arrays[1][S]) + CharacterStats_Skills2[S] + #13;
      end;                  //IntToStr(Players[CurrentPlayer].Arrays[1][B]
      After:= After + '</Character>' + #13;
    end else
    begin
      After:= After + '<Character>'+#13;
      After := After + '<Name>'+Players[CurrentPlayer].Name+'</Name>'+#13;
      CharacterStats_Skills:= ['<Attack>','<Defence>','<Strength>','<Hitpoints>','<Range>','<Prayer>','<Magic>','<Cooking>','<Woodcutting>','<Fletching>','<Fishing>','<Firemaking>','<Crafting>','<Smithing>','<Mining>','<Herblore>','<Agility>','<Thieving>','<Slayer>','<Farming>','<Runecrafting>','<Hunter>','<Construction>','<Summoning>','<Dungeoneering>'];
      CharacterStats_Skills2:= ['</Attack>','</Defence>','</Strength>','</Hitpoints>','</Range>','</Prayer>','</Magic>','</Cooking>','</Woodcutting>','</Fletching>','</Fishing>','</Firemaking>','</Crafting>','</Smithing>','</Mining>','</Herblore>','</Agility>','</Thieving>','</Slayer>','</Farming>','</Runecrafting>','</Hunter>','</Construction>','</Summoning>','</Dungeoneering>'];
      for S:=0 to high(CharacterStats_Skills) do
      begin
        After := After + CharacterStats_Skills[S] + IntToStr(Players[CurrentPlayer].Arrays[1][S]) + CharacterStats_Skills2[S] + #13;
      end;
      After:= After + '</Character>' + #13;
    end;
  end;
  After:= After + '</Characters>' + #13; //writes end of file

  Bobzilla_WriteFile(After);  //Writes data back to file
end;

function CharacterStats_FunctionCall: Integer;
begin
  Bobzilla_UpdatePlayer;
  Result := EXTRA_CONTINUE;
end;

function CharacterStats_Init: Boolean;
begin
  MSI_Extras[CurrentExtra].Enabled := True;
  MSI_Extras[CurrentExtra].Constant := CurrentExtra;
  Bobzilla_CheckFile;
  Result := True;
end;

procedure CharacterStats_Attach;
begin
  with MSI_Extras[CurrentExtra] do
  begin
    Name := 'CharacterStats';
    Author := 'Bobzilla69';
    Version := EXTRA_BETA;
    Setup := @CharacterStats_Init;

    PointerCount := 1;
    SetArrayLength(Pointers, PointerCount);
    with Pointers[0] do
    begin
      Constant := MSI_OnGetSkillLevels;
      FunctionCall := 'CharacterStats_FunctionCall';
    end;
  end;
end;

{$ENDIF}
